<?xml version="1.0" encoding="UTF-8"?>
<project name="smsgw" default="all">
  
  
  <property file="build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.egg"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.apk"/>
    <include name="*.swc"/>
    <include name="*.war"/>
    <include name="*.zip"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.com.googlecode.json-simple:json-simple:1.1.1.classpath">
    <pathelement location="${basedir}/lib/hamcrest-core-1.1.jar"/>
    <pathelement location="${basedir}/lib/json-simple-1.1.1.jar"/>
    <pathelement location="${basedir}/lib/junit-4.10.jar"/>
  </path>
  
  <path id="library.org.java-websocket:java-websocket:1.3.0.classpath">
    <pathelement location="${basedir}/lib/Java-WebSocket-1.3.0.jar"/>
  </path>
  
  <path id="library.org.json:json:20160212.classpath">
    <pathelement location="${basedir}/lib/json-20160212.jar"/>
  </path>
  
  <path id="library.rxtxcomm.classpath">
    <pathelement location="${basedir}/../../workspace/libs/RXTXcomm.jar"/>
  </path>
  
  <!-- Modules -->
  
  
  <!-- Module smsgw-core -->
  
  <dirname property="module.smsgw-core.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.smsgw-core" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="smsgw-core.output.dir" value="${module.smsgw-core.basedir}/out/production/smsgw-core"/>
  <property name="smsgw-core.testoutput.dir" value="${module.smsgw-core.basedir}/out/test/smsgw-core"/>
  
  <path id="smsgw-core.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="smsgw-core.module.production.classpath">
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
  </path>
  
  <path id="smsgw-core.runtime.production.module.classpath">
    <pathelement location="${smsgw-core.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
  </path>
  
  <path id="smsgw-core.module.classpath">
    <pathelement location="${smsgw-core.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
  </path>
  
  <path id="smsgw-core.runtime.module.classpath">
    <pathelement location="${smsgw-core.testoutput.dir}"/>
    <pathelement location="${smsgw-core.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.smsgw-core">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.smsgw-core">
    <patternset refid="excluded.from.module.smsgw-core"/>
  </patternset>
  
  <path id="smsgw-core.module.sourcepath">
    <dirset dir="${module.smsgw-core.basedir}/smsgw-core">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.smsgw-core" depends="compile.module.smsgw-core.production,compile.module.smsgw-core.tests" description="Compile module smsgw-core"/>
  
  <target name="compile.module.smsgw-core.production" description="Compile module smsgw-core; production classes">
    <mkdir dir="${smsgw-core.output.dir}"/>
    <javac destdir="${smsgw-core.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.smsgw-core}"/>
      <bootclasspath refid="smsgw-core.module.bootclasspath"/>
      <classpath refid="smsgw-core.module.production.classpath"/>
      <src refid="smsgw-core.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.smsgw-core"/>
    </javac>
    
    <copy todir="${smsgw-core.output.dir}">
      <fileset dir="${module.smsgw-core.basedir}/smsgw-core/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.smsgw-core.tests" depends="compile.module.smsgw-core.production" description="compile module smsgw-core; test classes" unless="skip.tests"/>
  
  <target name="clean.module.smsgw-core" description="cleanup module">
    <delete dir="${smsgw-core.output.dir}"/>
    <delete dir="${smsgw-core.testoutput.dir}"/>
  </target>
  
  
  <!-- Module port-finder -->
  
  <dirname property="module.port-finder.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.port-finder" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="port-finder.output.dir" value="${module.port-finder.basedir}/out/production/port-finder"/>
  <property name="port-finder.testoutput.dir" value="${module.port-finder.basedir}/out/test/port-finder"/>
  
  <path id="port-finder.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="port-finder.module.production.classpath">
    <path refid="library.rxtxcomm.classpath"/>
    <pathelement location="${smsgw-core.output.dir}"/>
  </path>
  
  <path id="port-finder.runtime.production.module.classpath">
    <pathelement location="${port-finder.output.dir}"/>
    <path refid="library.rxtxcomm.classpath"/>
    <path refid="smsgw-core.runtime.production.module.classpath"/>
  </path>
  
  <path id="port-finder.module.classpath">
    <pathelement location="${port-finder.output.dir}"/>
    <path refid="library.rxtxcomm.classpath"/>
    <pathelement location="${smsgw-core.testoutput.dir}"/>
    <pathelement location="${smsgw-core.output.dir}"/>
  </path>
  
  <path id="port-finder.runtime.module.classpath">
    <pathelement location="${port-finder.testoutput.dir}"/>
    <pathelement location="${port-finder.output.dir}"/>
    <path refid="library.rxtxcomm.classpath"/>
    <path refid="smsgw-core.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.port-finder">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.port-finder">
    <patternset refid="excluded.from.module.port-finder"/>
  </patternset>
  
  <path id="port-finder.module.sourcepath">
    <dirset dir="${module.port-finder.basedir}/port-finder">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.port-finder" depends="compile.module.port-finder.production,compile.module.port-finder.tests" description="Compile module port-finder"/>
  
  <target name="compile.module.port-finder.production" depends="compile.module.smsgw-core" description="Compile module port-finder; production classes">
    <mkdir dir="${port-finder.output.dir}"/>
    <javac destdir="${port-finder.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.port-finder}"/>
      <bootclasspath refid="port-finder.module.bootclasspath"/>
      <classpath refid="port-finder.module.production.classpath"/>
      <src refid="port-finder.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.port-finder"/>
    </javac>
    
    <copy todir="${port-finder.output.dir}">
      <fileset dir="${module.port-finder.basedir}/port-finder/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.port-finder.tests" depends="compile.module.port-finder.production" description="compile module port-finder; test classes" unless="skip.tests"/>
  
  <target name="clean.module.port-finder" description="cleanup module">
    <delete dir="${port-finder.output.dir}"/>
    <delete dir="${port-finder.testoutput.dir}"/>
  </target>
  
  
  <!-- Module smsgw-client -->
  
  <dirname property="module.smsgw-client.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.smsgw-client" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="smsgw-client.output.dir" value="${module.smsgw-client.basedir}/out/production/smsgw-client"/>
  <property name="smsgw-client.testoutput.dir" value="${module.smsgw-client.basedir}/out/test/smsgw-client"/>
  
  <path id="smsgw-client.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="smsgw-client.module.production.classpath">
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <path refid="library.rxtxcomm.classpath"/>
    <pathelement location="${smsgw-core.output.dir}"/>
  </path>
  
  <path id="smsgw-client.runtime.production.module.classpath">
    <pathelement location="${smsgw-client.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <path refid="library.rxtxcomm.classpath"/>
    <path refid="smsgw-core.runtime.production.module.classpath"/>
  </path>
  
  <path id="smsgw-client.module.classpath">
    <pathelement location="${smsgw-client.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <path refid="library.rxtxcomm.classpath"/>
    <pathelement location="${smsgw-core.testoutput.dir}"/>
    <pathelement location="${smsgw-core.output.dir}"/>
  </path>
  
  <path id="smsgw-client.runtime.module.classpath">
    <pathelement location="${smsgw-client.testoutput.dir}"/>
    <pathelement location="${smsgw-client.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <path refid="library.rxtxcomm.classpath"/>
    <path refid="smsgw-core.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.smsgw-client">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.smsgw-client">
    <patternset refid="excluded.from.module.smsgw-client"/>
  </patternset>
  
  <path id="smsgw-client.module.sourcepath">
    <dirset dir="${module.smsgw-client.basedir}/smsgw-client">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.smsgw-client" depends="compile.module.smsgw-client.production,compile.module.smsgw-client.tests" description="Compile module smsgw-client"/>
  
  <target name="compile.module.smsgw-client.production" depends="compile.module.smsgw-core" description="Compile module smsgw-client; production classes">
    <mkdir dir="${smsgw-client.output.dir}"/>
    <javac destdir="${smsgw-client.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.smsgw-client}"/>
      <bootclasspath refid="smsgw-client.module.bootclasspath"/>
      <classpath refid="smsgw-client.module.production.classpath"/>
      <src refid="smsgw-client.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.smsgw-client"/>
    </javac>
    
    <copy todir="${smsgw-client.output.dir}">
      <fileset dir="${module.smsgw-client.basedir}/smsgw-client/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.smsgw-client.tests" depends="compile.module.smsgw-client.production" description="compile module smsgw-client; test classes" unless="skip.tests"/>
  
  <target name="clean.module.smsgw-client" description="cleanup module">
    <delete dir="${smsgw-client.output.dir}"/>
    <delete dir="${smsgw-client.testoutput.dir}"/>
  </target>
  
  
  <!-- Module smsgw-server -->
  
  <dirname property="module.smsgw-server.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.smsgw-server" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="smsgw-server.output.dir" value="${module.smsgw-server.basedir}/out/production/smsgw-server"/>
  <property name="smsgw-server.testoutput.dir" value="${module.smsgw-server.basedir}/out/test/smsgw-server"/>
  
  <path id="smsgw-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="smsgw-server.module.production.classpath">
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <pathelement location="${smsgw-core.output.dir}"/>
  </path>
  
  <path id="smsgw-server.runtime.production.module.classpath">
    <pathelement location="${smsgw-server.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <path refid="smsgw-core.runtime.production.module.classpath"/>
  </path>
  
  <path id="smsgw-server.module.classpath">
    <pathelement location="${smsgw-server.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <pathelement location="${smsgw-core.testoutput.dir}"/>
    <pathelement location="${smsgw-core.output.dir}"/>
  </path>
  
  <path id="smsgw-server.runtime.module.classpath">
    <pathelement location="${smsgw-server.testoutput.dir}"/>
    <pathelement location="${smsgw-server.output.dir}"/>
    <path refid="library.com.googlecode.json-simple:json-simple:1.1.1.classpath"/>
    <path refid="library.org.java-websocket:java-websocket:1.3.0.classpath"/>
    <path refid="library.org.json:json:20160212.classpath"/>
    <path refid="smsgw-core.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.smsgw-server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.smsgw-server">
    <patternset refid="excluded.from.module.smsgw-server"/>
  </patternset>
  
  <path id="smsgw-server.module.sourcepath">
    <dirset dir="${module.smsgw-server.basedir}/smsgw-server">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.smsgw-server" depends="compile.module.smsgw-server.production,compile.module.smsgw-server.tests" description="Compile module smsgw-server"/>
  
  <target name="compile.module.smsgw-server.production" depends="compile.module.smsgw-core" description="Compile module smsgw-server; production classes">
    <mkdir dir="${smsgw-server.output.dir}"/>
    <javac destdir="${smsgw-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.smsgw-server}"/>
      <bootclasspath refid="smsgw-server.module.bootclasspath"/>
      <classpath refid="smsgw-server.module.production.classpath"/>
      <src refid="smsgw-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.smsgw-server"/>
    </javac>
    
    <copy todir="${smsgw-server.output.dir}">
      <fileset dir="${module.smsgw-server.basedir}/smsgw-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.smsgw-server.tests" depends="compile.module.smsgw-server.production" description="compile module smsgw-server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.smsgw-server" description="cleanup module">
    <delete dir="${smsgw-server.output.dir}"/>
    <delete dir="${smsgw-server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.smsgw-core, clean.module.port-finder, clean.module.smsgw-client, clean.module.smsgw-server" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.smsgw-core, compile.module.port-finder, compile.module.smsgw-client, compile.module.smsgw-server" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.port-finder:jar" value="${basedir}/out/artifacts/port_finder_jar"/>
    <property name="artifact.output.smsgw-client:jar" value="${basedir}/out/artifacts/smsgw_client_jar"/>
    <property name="artifact.output.smsgw-server:jar" value="${basedir}/out/artifacts/smsgw_server_jar"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.port-finder.jar" value="${artifacts.temp.dir}/port-finder.jar"/>
    <property name="temp.jar.path.smsgw-client.jar" value="${artifacts.temp.dir}/smsgw-client.jar"/>
    <property name="temp.jar.path.smsgw-server.jar" value="${artifacts.temp.dir}/smsgw-server.jar"/>
  </target>
  
  <target name="artifact.port-finder:jar" depends="init.artifacts, compile.module.port-finder, compile.module.smsgw-core" description="Build &#39;port-finder:jar&#39; artifact">
    <property name="artifact.temp.output.port-finder:jar" value="${artifacts.temp.dir}/port_finder_jar"/>
    <mkdir dir="${artifact.temp.output.port-finder:jar}"/>
    <jar destfile="${temp.jar.path.port-finder.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${port-finder.output.dir}"/>
      <zipfileset dir="${smsgw-core.output.dir}"/>
      <zipfileset src="${basedir}/lib/Java-WebSocket-1.3.0.jar"/>
      <zipfileset src="${basedir}/lib/json-simple-1.1.1.jar"/>
      <zipfileset src="${basedir}/lib/junit-4.10.jar"/>
      <zipfileset src="${basedir}/lib/hamcrest-core-1.1.jar"/>
      <zipfileset src="${basedir}/lib/json-20160212.jar"/>
      <zipfileset src="${basedir}/../../workspace/libs/RXTXcomm.jar"/>
    </jar>
    <copy file="${temp.jar.path.port-finder.jar}" tofile="${artifact.temp.output.port-finder:jar}/port-finder.jar"/>
  </target>
  
  <target name="artifact.smsgw-client:jar" depends="init.artifacts, compile.module.smsgw-client, compile.module.smsgw-core" description="Build &#39;smsgw-client:jar&#39; artifact">
    <property name="artifact.temp.output.smsgw-client:jar" value="${artifacts.temp.dir}/smsgw_client_jar"/>
    <mkdir dir="${artifact.temp.output.smsgw-client:jar}"/>
    <jar destfile="${temp.jar.path.smsgw-client.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${smsgw-client.output.dir}"/>
      <zipfileset dir="${smsgw-core.output.dir}"/>
      <zipfileset src="${basedir}/lib/Java-WebSocket-1.3.0.jar"/>
      <zipfileset src="${basedir}/lib/json-simple-1.1.1.jar"/>
      <zipfileset src="${basedir}/lib/junit-4.10.jar"/>
      <zipfileset src="${basedir}/lib/hamcrest-core-1.1.jar"/>
      <zipfileset src="${basedir}/lib/json-20160212.jar"/>
      <zipfileset src="${basedir}/../../workspace/libs/RXTXcomm.jar"/>
    </jar>
    <copy file="${temp.jar.path.smsgw-client.jar}" tofile="${artifact.temp.output.smsgw-client:jar}/smsgw-client.jar"/>
  </target>
  
  <target name="artifact.smsgw-server:jar" depends="init.artifacts, compile.module.smsgw-server, compile.module.smsgw-core" description="Build &#39;smsgw-server:jar&#39; artifact">
    <property name="artifact.temp.output.smsgw-server:jar" value="${artifacts.temp.dir}/smsgw_server_jar"/>
    <mkdir dir="${artifact.temp.output.smsgw-server:jar}"/>
    <jar destfile="${temp.jar.path.smsgw-server.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${smsgw-server.output.dir}"/>
      <zipfileset dir="${smsgw-core.output.dir}"/>
      <zipfileset src="${basedir}/lib/Java-WebSocket-1.3.0.jar"/>
      <zipfileset src="${basedir}/lib/json-simple-1.1.1.jar"/>
      <zipfileset src="${basedir}/lib/junit-4.10.jar"/>
      <zipfileset src="${basedir}/lib/hamcrest-core-1.1.jar"/>
      <zipfileset src="${basedir}/lib/json-20160212.jar"/>
    </jar>
    <copy file="${temp.jar.path.smsgw-server.jar}" tofile="${artifact.temp.output.smsgw-server:jar}/smsgw-server.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.port-finder:jar, artifact.smsgw-client:jar, artifact.smsgw-server:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.port-finder:jar}"/>
    <copy todir="${artifact.output.port-finder:jar}">
      <fileset dir="${artifact.temp.output.port-finder:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.smsgw-client:jar}"/>
    <copy todir="${artifact.output.smsgw-client:jar}">
      <fileset dir="${artifact.temp.output.smsgw-client:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.smsgw-server:jar}"/>
    <copy todir="${artifact.output.smsgw-server:jar}">
      <fileset dir="${artifact.temp.output.smsgw-server:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>